<?xml version="1.0"?>

<!--
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->

<project name="jck" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>Build STF based JCK Tests </description>

	<!-- set global properties for this build -->
	<property name="SYSTEMTEST_ROOT" value="${basedir}/../systemtest" />
	<property name="DEST" value="${BUILD_ROOT}/jck" />
	<property name="SYSTEMTEST_BUILD_ROOT" value="${BUILD_ROOT}/systemtest" />
	<property environment="env" />

	<target name="stage_jck_material">
		<!-- Starting downloading or updating JCK materials based on JCK GIT REPO and JCK VERSION-->
		<if>
			<not>
				<available file="${env.JCK_ROOT}/${env.JCK_VERSION}" type="dir" />
			</not>
			<!-- jck materials don't exist, download them -->
			<then>
				<echo message="${env.JCK_ROOT}/${env.JCK_VERSION} does not exist, 
					clone from ${env.JCK_GIT_REPO} to ${env.JCK_ROOT}/${env.JCK_VERSION}" />
				<exec executable="git" failonerror="true">
					<arg value="clone" />
					<arg value="--depth" />
					<arg value="1" />
					<arg value="--single-branch" />
					<arg value="${env.JCK_GIT_REPO}" />
					<arg value="${env.JCK_ROOT}/${env.JCK_VERSION}" />
				</exec>
			</then>
			<!-- jck materials exist, update jck materials if needed-->
			<else>
				<echo message="${env.JCK_ROOT}/${env.JCK_VERSION} exists, try to update jck materials" />
				<if>
					<or>
 						<equals arg1="jck10" arg2="${env.JCK_VERSION}" />
						<equals arg1="jck11" arg2="${env.JCK_VERSION}" />
					</or>
 				<then>
					<exec executable="git" failonerror="true">
						<arg value="-C" />
						<arg value="${env.JCK_ROOT}/${env.JCK_VERSION}" />
						<arg value="reset" />
						<arg value="--hard" />
						<arg value="origin/master" />
					</exec>   
 				</then>
				<else>
				
				<exec executable="git" dir="${env.JCK_ROOT}/${env.JCK_VERSION}" failonerror="true">
					<arg value="fetch" />
				</exec>
				
				<exec executable="git" dir="${env.JCK_ROOT}/${env.JCK_VERSION}" failonerror="true">
					<arg value="rebase" />
					<arg value="origin/master" />
				</exec>
				</else>
				</if>
			</else>
		</if>
	</target>

	<target name="compile_jck">
		<propertyregex property="jck_short_version" input="${env.JCK_VERSION}" regexp="jck([^\.]*)" select="\1" casesensitive="false" />
		<propertyregex property="platform_short_name" defaultValue="${PLATFORM}" input="${PLATFORM}" regexp="([^\.]*)_cr.*$$" select="\1" casesensitive="false" />
		<echo message="jck_short_version is ${jck_short_version}" />
		<echo message="platform_short_name is ${platform_short_name}" />
		<exec executable="make" failonerror="true">
			<arg value="-f" />
			<arg value="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.test.jck/src/native/makefile" />
			<arg value="PLATFORM=${platform_short_name}" />
			<arg value="SRCDIR=${env.JCK_ROOT}/${env.JCK_VERSION}/JCK-runtime-${jck_short_version}" />
			<arg value="OUTDIR=${env.JCK_ROOT}/${env.JCK_VERSION}/natives" />
			<arg value="JAVA_HOME=${JDK_HOME}" />
			<arg value="build" />
		</exec>
	</target>

	<target name="init">
		<mkdir dir="${DEST}" />
		<if>
			<not>
				<available file="${SYSTEMTEST_BUILD_ROOT}" type="dir" />
			</not>
			<then>
				<mkdir dir="${SYSTEMTEST_BUILD_ROOT}" />
			</then>
		</if>
	</target>

	<target name="clone_stf">
		<exec executable="git" failonerror="false">
			<arg value="clone" />
			<arg value="--depth" />
			<arg value="1" />
			<arg value="--single-branch" />
			<arg value="https://github.com/AdoptOpenJDK/stf.git" />
			<arg value="${SYSTEMTEST_ROOT}/stf" />
		</exec>
	</target>

	<target name="clone_systemtest">
		<exec executable="git" failonerror="false">
			<arg value="clone" />
			<arg value="--depth" />
			<arg value="1" />
			<arg value="--single-branch" />
			<arg value="https://github.com/AdoptOpenJDK/openjdk-systemtest.git" />
			<arg value="${SYSTEMTEST_ROOT}/openjdk-systemtest" />
		</exec>
	</target>

	<target name="check_systemtest" depends="init">
		<if>
			<not>
				<available file="${SYSTEMTEST_ROOT}/stf" type="dir" />
			</not>
			<then>
				<echo message="${SYSTEMTEST_ROOT}/stf does not exist, clone from GitHub" />
				<antcall target="clone_stf" inheritall="true" />
			</then>
			<else>
				<echo message="${SYSTEMTEST_ROOT}/stf exists, skip cloning" />
			</else>
		</if>
		<if>
			<not>
				<available file="${SYSTEMTEST_ROOT}/openjdk-systemtest" type="dir" />
			</not>
			<then>
				<echo message="${SYSTEMTEST_ROOT}/openjdk-systemtest does not exist, clone from GitHub" />
				<antcall target="clone_systemtest" inheritall="true" />
			</then>
			<else>
				<echo message="${SYSTEMTEST_ROOT}/openjdk-systemtest exists, skip cloning" />
			</else>
		</if>
	</target>

	<target name="configure_stf" depends="check_systemtest">
		<ant antfile="${SYSTEMTEST_ROOT}/stf/stf.build/build.xml" dir="${SYSTEMTEST_ROOT}/stf/stf.build/" target="configure" inheritAll="false">
			<property name="java.home" value="${JAVA_BIN}/.." />
		</ant>
		<ant antfile="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/" target="configure" inheritAll="false">
			<property name="java.home" value="${JAVA_BIN}/.." />
		</ant>
	</target>

	<target name="compile_stf" depends="configure_stf">
		<ant antfile="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build" inheritAll="false">
			<property name="java.home" value="${JAVA_BIN}/.." />
		</ant>
	</target>

	<target name="dist" depends="compile_stf" description="generate the distribution">
		<if>
			<not>
				<available file="${SYSTEMTEST_BUILD_ROOT}/openjdk-systemtest" type="dir" />
			</not>
			<then>
				<copy todir="${SYSTEMTEST_BUILD_ROOT}/stf">
					<fileset dir="${SYSTEMTEST_ROOT}/stf" includes="**" />
				</copy>
				<copy todir="${SYSTEMTEST_BUILD_ROOT}/openjdk-systemtest">
					<fileset dir="${SYSTEMTEST_ROOT}/openjdk-systemtest" includes="**" />
				</copy>
				<copy todir="${SYSTEMTEST_BUILD_ROOT}/systemtest_prereqs/">
					<fileset dir="${basedir}/../systemtest_prereqs/" includes="**" />
				</copy>
			</then>
		</if>
		<copy todir="${DEST}">
			<fileset dir="${basedir}">
				<exclude name="jck_root/" />
				<exclude name="README.md" />
			</fileset>
		</copy>
		<copy todir="${env.JCK_ROOT}/">
			<fileset dir="${basedir}/../systemtest_prereqs/" includes="**" />
		</copy>
	</target>

	<target name="build">
		<if>
			<and>
				<isset property="env.JCK_ROOT" />
				<isset property="env.JCK_VERSION" />
			</and>
			<then>
				<echo>=== env.JCK_ROOT is set to ${env.JCK_ROOT} ===</echo>
				<echo>=== env.JCK_VERSION is set to ${env.JCK_VERSION} ===</echo>
				<if>
					<isset property="env.JCK_GIT_REPO" />
					<then>
						<echo>=== env.JCK_GIT_REPO is set to ${env.JCK_GIT_REPO} ===</echo>
						<echo>start staging jck materials</echo>
						<antcall target="stage_jck_material" inheritall="true" />
						<echo>start building stf-based jck project</echo>
						<antcall target="dist" inheritall="true" />
						<echo>start compiling jck natives</echo>
						<antcall target="compile_jck" inheritall="true" />
					</then>
					<else>
						<echo>start building jck project</echo>
						<antcall target="dist" inheritall="true" />
						<echo>start compiling jck natives</echo>
						<antcall target="compile_jck" inheritall="true" />
					</else>
				</if>
			</then>
			<else>
				<fail message="env.JCK_ROOT: ${env.JCK_ROOT} or env.JCK_VERSION: ${env.JCK_VERSION}
					was not corretly set. If you do not want to compile JCK tests, 
					please use BUILD_LIST to include test folders you want to test." />
			</else>
		</if>
	</target>

	<target name="clean">
		<ant antfile="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/openjdk-systemtest/openjdk.build" inheritAll="false" target="clean">
			<property name="java.home" value="${JAVA_BIN}/.." />
		</ant>
		<ant antfile="${SYSTEMTEST_ROOT}/stf/stf.build/build.xml" dir="${SYSTEMTEST_ROOT}/stf/stf.build" inheritAll="false" target="clean">
			<property name="java.home" value="${JAVA_BIN}/.." />
		</ant>
	</target>
</project>
